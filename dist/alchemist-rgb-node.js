module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

/*
 * Alchemist-rgb
 *
 * Author: Michael C. Mullins
 * License: MIT
 *
 * This RGB implementation uses sRGB companding. There are other forms
 * such as L* and Gamma companding. If you would like to see these
 * implemented, post an issue on github and I'll try to work it in.
 *
 * Special thanks to Bruce Lindbloom not only for his color formulas
 * but for his color converter as well, both of which played a major
 * role in this module.
 *
 * You can find his site here:
 * http://www.brucelindbloom.com/
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = rgb;

function rgb() {
  return function initializer(alchemist) {
    var inverseCompand = function inverseCompand(companded) {
      return companded <= 0.04045 ? companded / 12.92 : Math.pow((companded + 0.055) / 1.055, 2.4);
    };

    var compand = function compand(linear) {
      return linear <= 0.0031308 ? linear * 12.92 : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055;
    };

    var determinant3x3 = function determinant3x3(m) {
      var left_product, right_product, lr, lc, rr, rc, c;
      var size = 3;
      var left_diags = 0;
      var right_diags = 0;

      for (var col = 0; col < size; col++) {
        left_product = 1;
        right_product = 1;
        for (var row = 0; row < size; row++) {
          lr = row;
          rr = size - row - 1;
          c = col + row;
          if (c >= size) c -= size;
          left_product *= m[lr][c];
          right_product *= m[rr][c];
        }
        left_diags += left_product;
        right_diags -= right_product;
      }

      return left_diags + right_diags;
    };

    var invert3x3 = function invert3x3(m) {
      var im = [[], [], []];
      var scale = 1 / determinant3x3(m);

      im[0][0] = scale * (m[2][2] * m[1][1] - m[2][1] * m[1][2]);
      im[0][1] = -scale * (m[2][2] * m[0][1] - m[2][1] * m[0][2]);
      im[0][2] = scale * (m[1][2] * m[0][1] - m[1][1] * m[0][2]);

      im[1][0] = -scale * (m[2][2] * m[1][0] - m[2][0] * m[1][2]);
      im[1][1] = scale * (m[2][2] * m[0][0] - m[2][0] * m[0][2]);
      im[1][2] = -scale * (m[1][2] * m[0][0] - m[1][0] * m[0][2]);

      im[2][0] = scale * (m[2][1] * m[1][0] - m[2][0] * m[1][1]);
      im[2][1] = -scale * (m[2][1] * m[0][0] - m[2][0] * m[0][1]);
      im[2][2] = scale * (m[1][1] * m[0][0] - m[1][0] * m[0][1]);

      return im;
    };

    var transformationMatrix = function computeMatrix(r, g, b, white) {
      var m = [[r.x / r.y, g.x / g.y, b.x / b.y], [1.0, 1.0, 1.0], [(1 - r.x - r.y) / r.y, (1 - g.x - g.y) / g.y, (1 - b.x - b.y) / b.y]];
      var mi = invert3x3(m);

      var sr = white.X * mi[0][0] + white.Y * mi[0][1] + white.Z * mi[0][2];
      var sg = white.X * mi[1][0] + white.Y * mi[1][1] + white.Z * mi[1][2];
      var sb = white.X * mi[2][0] + white.Y * mi[2][1] + white.Z * mi[2][2];

      m[0][0] *= sr;
      m[0][1] *= sg;
      m[0][2] *= sb;

      m[1][0] *= sr;
      m[1][1] *= sg;
      m[1][2] *= sb;

      m[2][0] *= sr;
      m[2][1] *= sg;
      m[2][2] *= sb;

      return m;
    };

    // chromacity cooridinates
    var rc = { x: 0.64, y: 0.33 };
    var gc = { x: 0.30, y: 0.60 };
    var bc = { x: 0.15, y: 0.06 };

    var m = transformationMatrix(rc, gc, bc, alchemist.white);
    var im = invert3x3(m);

    return {
      name: 'rgb',
      limits: {
        max: [255, 255, 255],
        min: [0, 0, 0]
      },
      to: { 'xyz': function xyz(R, G, B) {
          var r = inverseCompand(R / 255);
          var g = inverseCompand(G / 255);
          var b = inverseCompand(B / 255);
          var X = r * m[0][0] + g * m[0][1] + b * m[0][2];
          var Y = r * m[1][0] + g * m[1][1] + b * m[1][2];
          var Z = r * m[2][0] + g * m[2][1] + b * m[2][2];
          return [X, Y, Z];
        } },
      from: { 'xyz': function xyz(X, Y, Z) {
          var R = compand(X * im[0][0] + Y * im[0][1] + Z * im[0][2]) * 255;
          var G = compand(X * im[1][0] + Y * im[1][1] + Z * im[1][2]) * 255;
          var B = compand(X * im[2][0] + Y * im[2][1] + Z * im[2][2]) * 255;
          return [R, G, B];
        } }
    };
  };
}

module.exports = exports['default'];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMjk4Yzc5NjcwODEyOTE4ZDIxYzgiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQ25Cd0IsR0FBRzs7QUFBWixTQUFTLEdBQUcsR0FBSTtBQUM3QixTQUFPLFNBQVMsV0FBVyxDQUFFLFNBQVMsRUFBRTtBQUN0QyxRQUFJLGNBQWMsR0FBRyxTQUFTLGNBQWMsQ0FBRSxTQUFTLEVBQUU7QUFDdkQsYUFBUSxTQUFTLElBQUksT0FBTyxHQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxLQUFLLElBQUksS0FBSyxFQUFFLEdBQUcsQ0FBQztLQUNqRzs7QUFFRCxRQUFJLE9BQU8sR0FBRyxTQUFTLE9BQU8sQ0FBRSxNQUFNLEVBQUU7QUFDdEMsYUFBUSxNQUFNLElBQUksU0FBUyxHQUFLLE1BQU0sR0FBRyxLQUFLLEdBQUssS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFNO0tBQ2hHOztBQUVELFFBQUksY0FBYyxHQUFHLFNBQVMsY0FBYyxDQUFFLENBQUMsRUFBRTtBQUMvQyxVQUFJLFlBQVksRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuRCxVQUFJLElBQUksR0FBRyxDQUFDO0FBQ1osVUFBSSxVQUFVLEdBQUcsQ0FBQztBQUNsQixVQUFJLFdBQVcsR0FBRyxDQUFDOztBQUVuQixXQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ25DLG9CQUFZLEdBQUcsQ0FBQyxDQUFDO0FBQ2pCLHFCQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLGFBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7QUFDbkMsWUFBRSxHQUFHLEdBQUc7QUFDUixZQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ25CLFdBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRztBQUNiLGNBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ3pCLHNCQUFZLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4Qix1QkFBYSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUI7QUFDRCxrQkFBVSxJQUFJLFlBQVk7QUFDMUIsbUJBQVcsSUFBSSxhQUFhO09BQzdCOztBQUVELGFBQU8sVUFBVSxHQUFHLFdBQVc7S0FDaEM7O0FBRUQsUUFBSSxTQUFTLEdBQUcsU0FBUyxTQUFTLENBQUUsQ0FBQyxFQUFFO0FBQ3JDLFVBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDckIsVUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFbEMsUUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RCxRQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsUUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFNUQsUUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVELFFBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsUUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUU1RCxRQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVELFFBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RCxRQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUU1RCxhQUFPLEVBQUU7S0FDVjs7QUFFRCxRQUFJLG9CQUFvQixHQUFHLFNBQVMsYUFBYSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRTtBQUNqRSxVQUFJLENBQUMsR0FBRyxDQUNOLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUNmLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdEU7QUFDRCxVQUFJLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDOztBQUVyQixVQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxVQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0RSxVQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFdEUsT0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNkLE9BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDZCxPQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOztBQUVkLE9BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDZCxPQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2QsT0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFZCxPQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2QsT0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNkLE9BQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRWQsYUFBTyxDQUFDO0tBQ1Q7OztBQUdELFFBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO0FBQzdCLFFBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFO0FBQzdCLFFBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFOztBQUU3QixRQUFJLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ3pELFFBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7O0FBRXJCLFdBQU87QUFDTCxVQUFJLEVBQUUsS0FBSztBQUNYLFlBQU0sRUFBRTtBQUNOLFdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0FBQ3BCLFdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO09BQ2Y7QUFDRCxRQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsYUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUM5QixjQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMvQixjQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMvQixjQUFJLENBQUMsR0FBRyxjQUFjLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMvQixjQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0MsY0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9DLGNBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyxpQkFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pCLEVBQUU7QUFDSCxVQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsYUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNoQyxjQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHO0FBQ2pFLGNBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUc7QUFDakUsY0FBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRztBQUNqRSxpQkFBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pCLEVBQUU7S0FDSjtHQUNGO0NBQ0YiLCJmaWxlIjoiYWxjaGVtaXN0LXJnYi1ub2RlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCAyOThjNzk2NzA4MTI5MThkMjFjOFxuICoqLyIsIi8qXG4gKiBBbGNoZW1pc3QtcmdiXG4gKlxuICogQXV0aG9yOiBNaWNoYWVsIEMuIE11bGxpbnNcbiAqIExpY2Vuc2U6IE1JVFxuICpcbiAqIFRoaXMgUkdCIGltcGxlbWVudGF0aW9uIHVzZXMgc1JHQiBjb21wYW5kaW5nLiBUaGVyZSBhcmUgb3RoZXIgZm9ybXNcbiAqIHN1Y2ggYXMgTCogYW5kIEdhbW1hIGNvbXBhbmRpbmcuIElmIHlvdSB3b3VsZCBsaWtlIHRvIHNlZSB0aGVzZVxuICogaW1wbGVtZW50ZWQsIHBvc3QgYW4gaXNzdWUgb24gZ2l0aHViIGFuZCBJJ2xsIHRyeSB0byB3b3JrIGl0IGluLlxuICpcbiAqIFNwZWNpYWwgdGhhbmtzIHRvIEJydWNlIExpbmRibG9vbSBub3Qgb25seSBmb3IgaGlzIGNvbG9yIGZvcm11bGFzXG4gKiBidXQgZm9yIGhpcyBjb2xvciBjb252ZXJ0ZXIgYXMgd2VsbCwgYm90aCBvZiB3aGljaCBwbGF5ZWQgYSBtYWpvclxuICogcm9sZSBpbiB0aGlzIG1vZHVsZS5cbiAqXG4gKiBZb3UgY2FuIGZpbmQgaGlzIHNpdGUgaGVyZTpcbiAqIGh0dHA6Ly93d3cuYnJ1Y2VsaW5kYmxvb20uY29tL1xuICpcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZ2IgKCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdGlhbGl6ZXIgKGFsY2hlbWlzdCkge1xuICAgIHZhciBpbnZlcnNlQ29tcGFuZCA9IGZ1bmN0aW9uIGludmVyc2VDb21wYW5kIChjb21wYW5kZWQpIHtcbiAgICAgIHJldHVybiAoY29tcGFuZGVkIDw9IDAuMDQwNDUpID8gKGNvbXBhbmRlZCAvIDEyLjkyKSA6IE1hdGgucG93KChjb21wYW5kZWQgKyAwLjA1NSkgLyAxLjA1NSwgMi40KVxuICAgIH1cblxuICAgIHZhciBjb21wYW5kID0gZnVuY3Rpb24gY29tcGFuZCAobGluZWFyKSB7XG4gICAgICByZXR1cm4gKGxpbmVhciA8PSAwLjAwMzEzMDgpID8gKGxpbmVhciAqIDEyLjkyKSA6ICgxLjA1NSAqIE1hdGgucG93KGxpbmVhciwgMS4wIC8gMi40KSAtIDAuMDU1KVxuICAgIH1cblxuICAgIHZhciBkZXRlcm1pbmFudDN4MyA9IGZ1bmN0aW9uIGRldGVybWluYW50M3gzIChtKSB7XG4gICAgICB2YXIgbGVmdF9wcm9kdWN0LCByaWdodF9wcm9kdWN0LCBsciwgbGMsIHJyLCByYywgYztcbiAgICAgIHZhciBzaXplID0gM1xuICAgICAgdmFyIGxlZnRfZGlhZ3MgPSAwXG4gICAgICB2YXIgcmlnaHRfZGlhZ3MgPSAwXG5cbiAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHNpemU7IGNvbCsrKSB7XG4gICAgICAgIGxlZnRfcHJvZHVjdCA9IDE7XG4gICAgICAgIHJpZ2h0X3Byb2R1Y3QgPSAxO1xuICAgICAgICBmb3IgKHZhciByb3cgPSAwOyByb3cgPCBzaXplOyByb3crKykge1xuICAgICAgICAgIGxyID0gcm93XG4gICAgICAgICAgcnIgPSBzaXplIC0gcm93IC0gMVxuICAgICAgICAgIGMgPSBjb2wgKyByb3dcbiAgICAgICAgICBpZiAoYyA+PSBzaXplKSBjIC09IHNpemU7XG4gICAgICAgICAgbGVmdF9wcm9kdWN0ICo9IG1bbHJdW2NdXG4gICAgICAgICAgcmlnaHRfcHJvZHVjdCAqPSBtW3JyXVtjXVxuICAgICAgICB9XG4gICAgICAgIGxlZnRfZGlhZ3MgKz0gbGVmdF9wcm9kdWN0XG4gICAgICAgIHJpZ2h0X2RpYWdzIC09IHJpZ2h0X3Byb2R1Y3RcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxlZnRfZGlhZ3MgKyByaWdodF9kaWFnc1xuICAgIH1cblxuICAgIHZhciBpbnZlcnQzeDMgPSBmdW5jdGlvbiBpbnZlcnQzeDMgKG0pIHtcbiAgICAgIHZhciBpbSA9IFtbXSwgW10sIFtdXVxuICAgICAgdmFyIHNjYWxlID0gMSAvIGRldGVybWluYW50M3gzKG0pO1xuXG4gICAgICBpbVswXVswXSA9ICBzY2FsZSAqIChtWzJdWzJdICogbVsxXVsxXSAtIG1bMl1bMV0gKiBtWzFdWzJdKTtcbiAgICAgIGltWzBdWzFdID0gLXNjYWxlICogKG1bMl1bMl0gKiBtWzBdWzFdIC0gbVsyXVsxXSAqIG1bMF1bMl0pO1xuICAgICAgaW1bMF1bMl0gPSAgc2NhbGUgKiAobVsxXVsyXSAqIG1bMF1bMV0gLSBtWzFdWzFdICogbVswXVsyXSk7XG5cbiAgICAgIGltWzFdWzBdID0gLXNjYWxlICogKG1bMl1bMl0gKiBtWzFdWzBdIC0gbVsyXVswXSAqIG1bMV1bMl0pO1xuICAgICAgaW1bMV1bMV0gPSAgc2NhbGUgKiAobVsyXVsyXSAqIG1bMF1bMF0gLSBtWzJdWzBdICogbVswXVsyXSk7XG4gICAgICBpbVsxXVsyXSA9IC1zY2FsZSAqIChtWzFdWzJdICogbVswXVswXSAtIG1bMV1bMF0gKiBtWzBdWzJdKTtcblxuICAgICAgaW1bMl1bMF0gPSAgc2NhbGUgKiAobVsyXVsxXSAqIG1bMV1bMF0gLSBtWzJdWzBdICogbVsxXVsxXSk7XG4gICAgICBpbVsyXVsxXSA9IC1zY2FsZSAqIChtWzJdWzFdICogbVswXVswXSAtIG1bMl1bMF0gKiBtWzBdWzFdKTtcbiAgICAgIGltWzJdWzJdID0gIHNjYWxlICogKG1bMV1bMV0gKiBtWzBdWzBdIC0gbVsxXVswXSAqIG1bMF1bMV0pO1xuXG4gICAgICByZXR1cm4gaW1cbiAgICB9XG5cbiAgICB2YXIgdHJhbnNmb3JtYXRpb25NYXRyaXggPSBmdW5jdGlvbiBjb21wdXRlTWF0cml4IChyLCBnLCBiLCB3aGl0ZSkge1xuICAgICAgdmFyIG0gPSBbXG4gICAgICAgIFtyLnggLyByLnksIGcueCAvIGcueSwgYi54IC8gYi55XSxcbiAgICAgICAgWzEuMCwgMS4wLCAxLjBdLFxuICAgICAgICBbKDEgLSByLnggLSByLnkpIC8gci55LCAoMSAtIGcueCAtIGcueSkgLyBnLnksICgxIC0gYi54IC0gYi55KSAvIGIueV1cbiAgICAgIF1cbiAgICAgIHZhciBtaSA9IGludmVydDN4MyhtKVxuXG4gICAgICB2YXIgc3IgPSB3aGl0ZS5YICogbWlbMF1bMF0gKyB3aGl0ZS5ZICogbWlbMF1bMV0gKyB3aGl0ZS5aICogbWlbMF1bMl07XG4gICAgICB2YXIgc2cgPSB3aGl0ZS5YICogbWlbMV1bMF0gKyB3aGl0ZS5ZICogbWlbMV1bMV0gKyB3aGl0ZS5aICogbWlbMV1bMl07XG4gICAgICB2YXIgc2IgPSB3aGl0ZS5YICogbWlbMl1bMF0gKyB3aGl0ZS5ZICogbWlbMl1bMV0gKyB3aGl0ZS5aICogbWlbMl1bMl07XG5cbiAgICAgIG1bMF1bMF0gKj0gc3I7XG4gICAgICBtWzBdWzFdICo9IHNnO1xuICAgICAgbVswXVsyXSAqPSBzYjtcblxuICAgICAgbVsxXVswXSAqPSBzcjtcbiAgICAgIG1bMV1bMV0gKj0gc2c7XG4gICAgICBtWzFdWzJdICo9IHNiO1xuXG4gICAgICBtWzJdWzBdICo9IHNyO1xuICAgICAgbVsyXVsxXSAqPSBzZztcbiAgICAgIG1bMl1bMl0gKj0gc2I7XG5cbiAgICAgIHJldHVybiBtXG4gICAgfVxuXG4gICAgLy8gY2hyb21hY2l0eSBjb29yaWRpbmF0ZXNcbiAgICB2YXIgcmMgPSB7IHg6IDAuNjQsIHk6IDAuMzMgfVxuICAgIHZhciBnYyA9IHsgeDogMC4zMCwgeTogMC42MCB9XG4gICAgdmFyIGJjID0geyB4OiAwLjE1LCB5OiAwLjA2IH1cblxuICAgIHZhciBtID0gdHJhbnNmb3JtYXRpb25NYXRyaXgocmMsIGdjLCBiYywgYWxjaGVtaXN0LndoaXRlKVxuICAgIHZhciBpbSA9IGludmVydDN4MyhtKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdyZ2InLFxuICAgICAgbGltaXRzOiB7XG4gICAgICAgIG1heDogWzI1NSwgMjU1LCAyNTVdLFxuICAgICAgICBtaW46IFswLCAwLCAwXVxuICAgICAgfSxcbiAgICAgIHRvOiB7ICd4eXonOiBmdW5jdGlvbiAoUiwgRywgQikge1xuICAgICAgICB2YXIgciA9IGludmVyc2VDb21wYW5kKFIgLyAyNTUpXG4gICAgICAgIHZhciBnID0gaW52ZXJzZUNvbXBhbmQoRyAvIDI1NSlcbiAgICAgICAgdmFyIGIgPSBpbnZlcnNlQ29tcGFuZChCIC8gMjU1KVxuICAgICAgICB2YXIgWCA9IHIgKiBtWzBdWzBdICsgZyAqIG1bMF1bMV0gKyBiICogbVswXVsyXVxuICAgICAgICB2YXIgWSA9IHIgKiBtWzFdWzBdICsgZyAqIG1bMV1bMV0gKyBiICogbVsxXVsyXVxuICAgICAgICB2YXIgWiA9IHIgKiBtWzJdWzBdICsgZyAqIG1bMl1bMV0gKyBiICogbVsyXVsyXVxuICAgICAgICByZXR1cm4gW1gsIFksIFpdXG4gICAgICB9IH0sXG4gICAgICBmcm9tOiB7ICd4eXonOiBmdW5jdGlvbiAoWCwgWSwgWikge1xuICAgICAgICB2YXIgUiA9IGNvbXBhbmQoWCAqIGltWzBdWzBdICsgWSAqIGltWzBdWzFdICsgWiAqIGltWzBdWzJdKSAqIDI1NVxuICAgICAgICB2YXIgRyA9IGNvbXBhbmQoWCAqIGltWzFdWzBdICsgWSAqIGltWzFdWzFdICsgWiAqIGltWzFdWzJdKSAqIDI1NVxuICAgICAgICB2YXIgQiA9IGNvbXBhbmQoWCAqIGltWzJdWzBdICsgWSAqIGltWzJdWzFdICsgWiAqIGltWzJdWzJdKSAqIDI1NVxuICAgICAgICByZXR1cm4gW1IsIEcsIEJdXG4gICAgICB9IH1cbiAgICB9XG4gIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9